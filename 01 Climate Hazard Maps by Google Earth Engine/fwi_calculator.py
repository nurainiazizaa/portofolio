# -*- coding: utf-8 -*-
"""FWI_Calculator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LQnJ2DoCl21zY7Ar_ySk9IRrc_rsP5RH
"""

import ee
import eemont
import datetime

class FFMC:
    #Fine Fuel Moisture Code Calculation
    #What we have to input is:
    ### inputs : input_fwi
    ###   daily observed weather inputs at noon
    ### ffmc_prev : ee.Image
    ###   yesterday's fine fuel moisture code

    def __init__(self, inputs, ffmc_prev):
        self.ffmc_prev = ee.Image(ffmc_prev)
        self.temp = inputs.temp
        self.hum = inputs.hum
        self.wind = inputs.wind
        self.prec = inputs.prec

    def __moisture_rain(self):
        #initial moisture
        m_o = 147.2 * (101 - self.ffmc_prev) / \
            (59.5 + self.ffmc_prev)
        
        #raining effect to moisture
        raining = self.prec.gt(0.5)
        negligible = raining.Not()
        r_f = raining * (self.prec - 0.5)
        
        mo_comp = m_o.gt(150)
        normal = m_o.Not()

        m_r = 42.5 * (-100 / (251 - m_o)).exp() * \
        (1 - (-6.93 / r_f).exp()) * r_f
        correction = 0.0015 * (m_o - 150) ** 2 * r_f ** 0.5

        mr_comp = m_r + correction
        mr_neg = 0 * negligible

        #moisture change
        mr_change = raining * (mo_comp * mr_comp + normal * m_r) \
        + mr_neg

        #final moisture rain
        self.mr = (m_o + mr_change).min(ee.Image(250))

    def __drying_wetting(self):
        #Equilibrium Moisture Content (EMC) for drying and wetting phase
        E_d = 0.942 * self.hum ** 0.679 + \
            11 * ((self.hum - 100) / 10).exp() + \
            0.18 * (21.1 - self.temp) * \
            (1 - (-0.115 * self.hum).exp())

        E_w = 0.618 * self.hum ** 0.753 + \
            10 * ((self.hum - 100) / 10).exp() + \
            0.18 * (21.1 - self.temp) * \
            (1 - (-0.115 * self.hum).exp())

        #log drying/wetting rate
        k_o = 0.424 * (1 - (self.hum / 100) ** 1.7) + \
            0.0694 * self.wind ** 0.5 * \
            (1 - (self.hum / 100) ** 8)
        k_1 = 0.424 * (1 - ((100 - self.hum) / 100) ** 1.7) + \
            0.0694 * self.wind ** 0.5 * \
            (1 - ((100 - self.hum) / 100) ** 8)
        k_d = k_o * 0.581 * (0.0365 * self.temp).exp()
        k_w = k_1 * 0.581 * (0.0365 * self.temp).exp()

        #wetting and drying conditions
        drying = self.mr.gt(E_d)
        wetting = self.mr.lt(E_w)
        no_change = (drying + wetting).Not()

        # Moisture content after drying
        m_drying = drying * (E_d + (self.mr - E_d) / 10 ** k_d)
        m_wetting = wetting * (E_w - (E_w - self.mr) / 10 ** k_w)
        m_no_change = no_change * self.mr
        m = m_drying + m_wetting + m_no_change

        # Calculate today's Fine Fuel Moisture Code
        self.ffmc = (59.5 * (250.0 - m) / (147.2 + m)) \
            .min(ee.Image(101.0)).rename( \
            'fine_fuel_moisture_code')
    
    def compute(self):
        self.__moisture_rain()
        self.__drying_wetting()
        return self.ffmc

class DMC:
    #Duff Moisture Code Calculation (DMC)
    #What we have to input is:
    ###input : input_fwi
    ###   daily observed weather inputs at noon
    ###dmc_prev : ee.Image
    ###   yesterday's duff moisture code
    ###equatorial : bool
    ###   use equatorial mode to calculate day length
    ###obs : datetime.date
    ###   observed date

    def __init__(self, inputs, dmc_prev, obs, equatorial=True):
        self.dmc_prev = ee.Image(dmc_prev)
        self.temp = inputs.temp
        self.hum = inputs.hum
        self.prec = inputs.prec
        self.obs = obs
        self.equatorial = equatorial
        
    def __length_a_day(self):
        if self.equatorial:
            self.day_length = ee.Image(9.0)
        else:
            self.__calculate_day_length()
    
    def __calculate_day_length(self):
        DayLength46N = [ 6.5,  7.5,  9.0, 12.8, 13.9, 13.9, \
                        12.4, 10.9,  9.4,  8.0,  7.0,  6.0]
        DayLength20N = [ 7.9,  8.4,  8.9,  9.5,  9.9, 10.2, \
                        10.1,  9.7,  9.1,  8.6,  8.1,  7.8]
        DayLength20S = [10.1,  9.6,  9.1,  8.5,  8.1,  7.8, \
                        7.9,  8.3,  8.9,  9.4,  9.9, 10.2]
        DayLength40S = [11.5, 10.5,  9.2,  7.9,  6.8,  6.2, \
                        6.5,  7.4,  8.7, 10.0, 11.2, 11.8]

        latitude = ee.Image.pixelLonLat().select('latitude')

        mask_1 = latitude.lte(90.0) * latitude.gt(33.0)
        mask_2 = latitude.lte(33.0) * latitude.gt(0)
        mask_3 = latitude.lte(0) * latitude.gt(-30.0)
        mask_4 = latitude.lte(-30.0) * latitude.gt(-90.0)

        index = self.obs.month - 1
        length_1 = mask_1 * ee.Image(DayLength46N[index])
        length_2 = mask_2 * ee.Image(DayLength20N[index])
        length_3 = mask_3 * ee.Image(DayLength20S[index])
        length_4 = mask_4 * ee.Image(DayLength40S[index])
        self.day_length = length_1 + length_2 + length_3 + length_4

    def __rain_condition(self):
        #calculate initial dmc
        M_o = 20.0 + 280.0 / (0.023 * self.dmc_prev).exp()

        #effective precipitation
        raining = self.prec.gt(1.5)
        negligible = raining.Not()
        r_e = (0.92 * self.prec - 1.27).updateMask(raining)

        #dmc calculation
        po_1 = self.dmc_prev.lte(33.0)
        po_2 = self.dmc_prev.lte(65.0) * self.dmc_prev.gt(33.0)
        po_3 = self.dmc_prev.gt(65.0)
        b_1 = (100 / (0.5 + 0.3 * self.dmc_prev)) * po_1
        b_2 = (14 - 1.3 * self.dmc_prev.log()) * po_2
        b_3 = (6.2 * self.dmc_prev.log() - 17.2) * po_3
        b = b_1 + b_2 + b_3

        M_r = (M_o + 1000 * r_e / (48.77 + b * r_e)) \
            .updateMask(raining).rename('M')
        M_n = (M_o).updateMask(negligible).rename('M')
        M = ee.ImageCollection([M_r, M_n]).max()

        self.P_r = (244.72 - 43.43 * (M - 20.0).log()) \
            .max(ee.Image(0.0))
    
    def __dry_condition(self):
        log_drying = self.temp > -1.1
        negligible = log_drying.Not()
        self.__length_a_day()

        k_d = (1.894 * (self.temp + 1.1) * (100.0 - self.hum) \
            * self.day_length * 1e-6).updateMask(log_drying) \
            .rename('K')
        k_n = ee.Image(0.0).updateMask(negligible).rename('K')
        K = ee.ImageCollection([k_d, k_n]).max()

        self.dmc = (self.P_r + 100.0 * K).rename('duff_moisture_code')
        
    def compute(self):
        self.__rain_condition()
        self.__dry_condition()
        return self.dmc

class DC:
    #Drought Code Calculation
    #What we have to input is:
    ###inputs : input_fwi
    ###   daily observed weather inputs at noon
    ###dc_prev : ee.Image
    ###   yesterday's drought code
    ###equatorial : bool
    ###   use equatorial mode to calculate drying factor
    ###obs : datetime.date
    ###   observed date

    def __init__(self, inputs, dc_prev, obs, equatorial=True):
        self.dc_prev = ee.Image(dc_prev)
        self.temp = inputs.temp
        self.prec = inputs.prec
        self.obs = obs
        self.equatorial = equatorial

    def __drought_factor(self):
        if self.equatorial:
            self.drought = ee.Image(1.39)
        else:
            self.__calculate_drought_factor()
    
    def __calculate_drought_factor(self):
        latitude = ee.Image.pixelLonLat() \
            .select('latitude')

        LfN = [-1.6, -1.6, -1.6, 0.9, 3.8, 5.8, \
               6.4, 5.0, 2.4, 0.4, -1.6, -1.6]
        LfS = [6.4, 5.0, 2.4, 0.4, -1.6, -1.6, \
               -1.6, -1.6, -1.6, 0.9, 3.8, 5.8]

        mask_1 = latitude.gt(0)
        mask_2 = latitude.lte(0)

        factor_1 = mask_1 * ee.Image(LfN[self.obs.month - 1])
        factor_2 = mask_2 * ee.Image(LfS[self.obs.month - 1])

        self.drought = factor_1 + factor_2

    def __rain_condition(self):
        #calculate initial dc
        Q_o = (800.0 * (-1 * self.dc_prev / 400.0).exp())

        #effective rain
        raining = self.prec.gt(2.8)
        negligible = raining.Not()
        r_d = (0.83 * self.prec - 1.27).updateMask(raining)

        # Calculates the moisture change
        Q_r = (Q_o + 3.937 * r_d).updateMask(raining).rename('Q')
        Q_n = (Q_o).updateMask(negligible).rename('Q')
        Q = ee.ImageCollection([Q_r, Q_n]).max()

        self.D_r = (400.0 * (800.0 / Q).log()).max(ee.Image(0.0))

    def __dry_condition(self):
        drying = self.temp.gt(-2.8)
        negligible = drying.Not()

        self.__drought_factor()

        # Calculates drying equation
        V_d = (0.36 * (self.temp + 2.8) + self.drought) \
            .updateMask(drying).rename('V')
        V_n = (self.drought).updateMask(negligible).rename('V')
        V = ee.ImageCollection([V_d, V_n]).max()

        self.dc = (self.D_r + 0.5 * V).rename('drought_code')

    def compute(self):
        self.__rain_condition()
        self.__dry_condition()
        return self.dc

class ISI:
    #Initial Spread Index (ISI) Calculation
    #Inputs:
    ###wind : input_fwi.wind
    ###   wind speed observed at noon in kph
    ###ffmc : fine_fuel_moisture_code.ffmc
    ###   today's fine fuel moisture code

    def __init__(self, wind, ffmc):
        self.wind = wind
        self.ffmc = ffmc
    
    def compute(self):
        f_W = (0.05039 * self.wind).exp()

        m = 147.2 * (101 - self.ffmc) / (59.5 + self.ffmc)
        f_F = 91.9 * (-0.1386 * m).exp() * (1.0 + m ** 5.31 / \
            (4.93 * 1e7))
        
        self.isi = (0.208 * f_W * f_F).rename('initial_spread_index')
        return self.isi

class BUI:
    #Buildup Index Calculation
    #Inputs:
    ###dmc : ee.Image
    ###   today's duff moisture code
    ###dc : ee.Image
    ###   today's drought code

    def __init__(self, dmc, dc):
        self.dmc = dmc
        self.dc = dc
    
    def compute(self):
        cond = self.dmc.lte(0.4 * self.dc)
        not_cond = cond.Not()
        
        U_1 = (0.8 * self.dmc * self.dc / (self.dmc + 0.4 * self.dc)) \
            .updateMask(cond).rename('buildup_index')
        U_2 = (self.dmc - (1 - 0.8 * self.dc / (self.dmc + 0.4 * self.dc)) \
            * (0.92 + (0.0114 * self.dmc) ** 1.7)) \
            .updateMask(not_cond).rename('buildup_index')
        self.bui = ee.ImageCollection([U_1, U_2]).max()
        return self.bui

class FWI:
    #Fire Weather Index Calculation
    #All parameters that we have been calculated is used to calculate FWI
    #There are:
    ###isi : ee.Image
    ###   today's initial spread index
    ###bui : ee.Image
    ###   today's buildup index  

    def __init__(self, isi, bui):
        self.isi = isi
        self.bui = bui

    def compute(self):
        heat_transfer = self.bui.gt(80)
        normal = heat_transfer.Not()

        fD_normal = (0.626 * self.bui ** 0.809 + 2) \
            .updateMask(normal).rename('fD')
        fD_heat = (1000 / (25 + 108.64 * (-0.023 * self.bui).exp())) \
            .updateMask(heat_transfer).rename('fD')
        fD = ee.ImageCollection([fD_normal, fD_heat]).max()

        B = 0.1 * self.isi * fD

        S_scale = B.gt(1.0)
        B_scale = S_scale.Not()

        fwi_s = ((2.72 * (0.434 * B.log()) ** 0.647).exp()) \
            .updateMask(S_scale).rename('fire_weather_index')
        fwi_b = (B).updateMask(B_scale).rename('fire_weather_index')
        self.fwi = ee.ImageCollection([fwi_b, fwi_s]).max()
        return self.fwi

class FWICalculator:
    #Reconstruct FWI Calculator to set initial value in ffmc, dmc, and dc
    #The inputs are:
    ###obs : datetime.datetime
    ###   the observation datetime
    ###inputs : FWIInputs
    ###   daily observed weather inputs at noon
    ###ffmc : ee.Image
    ###   today's fine fuel moisture code
    ###dmc : ee.Image
    ###   today's duff moisture code
    ###dc : ee.Image
    ###   today's drought code
    ###isi : ee.Image
    ###   today's initial spread index
    ###bui : ee.Image
    ###   today's buildup index
    ###fwi : ee.Image
    ###   today's fire weather index

    def __init__(self, obs, inputs, equatorial=True):
        self.obs = obs
        self.inputs = inputs
        self.equatorial = equatorial

    def set_previous_codes(self, ffmc_prev=85.0, dmc_prev=6.0, dc_prev=15.0):
        self.ffmc_prev = ee.Image(ffmc_prev)
        self.dmc_prev = ee.Image(dmc_prev)
        self.dc_prev = ee.Image(dc_prev)

    def set_equatorial_mode(self, equatorial):
        self.equatorial = equatorial
    
    def calculate_fine_fuel_moisture_code(self):
        ffmc = FFMC(self.inputs, self.ffmc_prev)
        self.ffmc = ffmc.compute()
    
    def calculate_duff_moisture_code(self):
        dmc = DMC(self.inputs, self.dmc_prev, self.obs)
        self.dmc = dmc.compute()
    
    def calculate_drought_code(self):
        dc = DC(self.inputs, self.dc_prev, self.obs)
        self.dc = dc.compute()
    
    def calculate_initial_spread_index(self):
        isi = ISI(self.inputs.wind, self.ffmc)
        self.isi = isi.compute()
    
    def calculate_buildup_index(self):
        bui = BUI(self.dmc, self.dc)
        self.bui = bui.compute()
    
    def calculate_fire_weather_index(self):
        fwi = FWI(self.isi, self.bui)
        self.fwi = fwi.compute()
    
    def compute(self):
        self.calculate_fine_fuel_moisture_code()
        self.calculate_duff_moisture_code()
        self.calculate_drought_code()
        self.calculate_initial_spread_index()
        self.calculate_buildup_index()
        self.calculate_fire_weather_index()
        return self.fwi
    
    def update_inputs(self, inputs):
        self.obs = self.obs + datetime.timedelta(days=1)
        self.inputs = inputs

        self.ffmc_prev = self.ffmc
        self.dmc_prev = self.dmc
        self.dc_prev = self.dc